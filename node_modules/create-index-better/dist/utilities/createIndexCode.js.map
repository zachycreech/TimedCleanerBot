{"version":3,"sources":["../../src/utilities/createIndexCode.js"],"names":["safeVariableName","fileName","indexOfDot","indexOf","slice","buildExportBlock","files","config","mode","map","join","trim","split","line","reduce","a","b","x","i","Error","filePaths","options","initCode","code","configCode","banner","banners","_","isArray","forEach","size","JSON","stringify","length","sortedFilePaths","sort","stripExtension","path","extname","Infinity"],"mappings":"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","file":"createIndexCode.js","sourcesContent":["import path from 'path';\nimport _ from 'lodash';\n\nconst safeVariableName = (fileName) => {\n  const indexOfDot = fileName.indexOf('.');\n\n  if (indexOfDot === -1) {\n    return fileName;\n  } else {\n    return fileName.slice(0, indexOfDot);\n  }\n};\n\nconst buildExportBlock = (files, config = {}) => {\n  const {mode = 'default,*'} = config;\n\n  if (config.mode === 'default') {\n    return files.map((fileName) => `export { default as ${safeVariableName(fileName)} } from './${fileName}';`).join('\\n');\n  } else if (mode === '*') {\n    return files.map((fileName) => `export * from './${fileName}';`).join('\\n');\n  } else if (mode === 'named*') {\n    return files.map((fileName) => `import * as ${safeVariableName(fileName)} from './${fileName}';`).join('\\n') +\n    `\\nexport { ${files.map(safeVariableName).join(', ')} };`;\n  } else if (mode === 'default,*') {\n    return files.map((fileName) => {\n      return `\n      export { default as ${safeVariableName(fileName)} } from './${fileName}';\n      export * from './${fileName}';\n    `.trim().split('\\n').map((line) => {\n      return line.trim();\n    });\n    }).reduce((a, b) => {\n      return a.map((x, i) => x + '\\n' + b[i]);\n    }, ['', '']).join('').slice(1);\n  } else if (mode === 'default{}') {\n    return files.map((fileName) => `import ${safeVariableName(fileName)} from './${fileName}';`).join('\\n') +\n    `\\nexport default { ${files.map(safeVariableName).join(', ')} };`;\n  }\n\n  throw new Error(`Invalid mode '${mode}'`);\n};\n\nexport default (filePaths, options = {}, initCode = '') => {\n  let code;\n  let configCode;\n\n  code = initCode;\n  configCode = '';\n\n  if (options.banner) {\n    const banners = _.isArray(options.banner) ? options.banner : [options.banner];\n\n    banners.forEach((banner) => {\n      code += banner + '\\n';\n    });\n\n    code += '\\n';\n  }\n\n  if (options.config && _.size(options.config) > 0) {\n    configCode += ' ' + JSON.stringify(options.config);\n  }\n\n  code += '// @create-index' + configCode + '\\n\\n';\n\n  if (filePaths.length) {\n    let sortedFilePaths;\n\n    sortedFilePaths = filePaths.sort();\n\n    if (options.stripExtension) {\n      sortedFilePaths = sortedFilePaths.map((x) => x.slice(0, -path.extname(x).length || Infinity));\n    }\n\n    code += buildExportBlock(sortedFilePaths, options.config) + '\\n\\n';\n  }\n\n  return code;\n};\n"]}
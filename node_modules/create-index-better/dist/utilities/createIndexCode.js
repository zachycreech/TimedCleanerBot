'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const safeVariableName = fileName => {
  const indexOfDot = fileName.indexOf('.');

  if (indexOfDot === -1) {
    return fileName;
  } else {
    return fileName.slice(0, indexOfDot);
  }
};

const buildExportBlock = function (files) {
  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _config$mode = config.mode;
  const mode = _config$mode === undefined ? 'default,*' : _config$mode;


  if (config.mode === 'default') {
    return files.map(fileName => `export { default as ${safeVariableName(fileName)} } from './${fileName}';`).join('\n');
  } else if (mode === '*') {
    return files.map(fileName => `export * from './${fileName}';`).join('\n');
  } else if (mode === 'named*') {
    return files.map(fileName => `import * as ${safeVariableName(fileName)} from './${fileName}';`).join('\n') + `\nexport { ${files.map(safeVariableName).join(', ')} };`;
  } else if (mode === 'default,*') {
    return files.map(fileName => {
      return `
      export { default as ${safeVariableName(fileName)} } from './${fileName}';
      export * from './${fileName}';
    `.trim().split('\n').map(line => {
        return line.trim();
      });
    }).reduce((a, b) => {
      return a.map((x, i) => x + '\n' + b[i]);
    }, ['', '']).join('').slice(1);
  } else if (mode === 'default{}') {
    return files.map(fileName => `import ${safeVariableName(fileName)} from './${fileName}';`).join('\n') + `\nexport default { ${files.map(safeVariableName).join(', ')} };`;
  }

  throw new Error(`Invalid mode '${mode}'`);
};

exports.default = function (filePaths) {
  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  let initCode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

  let code;
  let configCode;

  code = initCode;
  configCode = '';

  if (options.banner) {
    const banners = _lodash2.default.isArray(options.banner) ? options.banner : [options.banner];

    banners.forEach(banner => {
      code += banner + '\n';
    });

    code += '\n';
  }

  if (options.config && _lodash2.default.size(options.config) > 0) {
    configCode += ' ' + JSON.stringify(options.config);
  }

  code += '// @create-index' + configCode + '\n\n';

  if (filePaths.length) {
    let sortedFilePaths;

    sortedFilePaths = filePaths.sort();

    if (options.stripExtension) {
      sortedFilePaths = sortedFilePaths.map(x => x.slice(0, -_path2.default.extname(x).length || Infinity));
    }

    code += buildExportBlock(sortedFilePaths, options.config) + '\n\n';
  }

  return code;
};
//# sourceMappingURL=createIndexCode.js.map